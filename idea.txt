

Better Examples

**best**
https://davidgomes.com/loading-strava-activities-into-a-sql-database-and-using-english-to-ask-questions/

https://stackoverflow.com/questions/39224382/how-can-i-import-a-json-file-into-postgresql

https://towardsdatascience.com/building-a-data-pipeline-for-my-strava-data-98ea8b2b0767



** Load parquet to postgres **

https://www.crunchydata.com/blog/parquet-and-postgres-in-the-data-lake

https://medium.com/@ahuarte/loading-parquet-in-postgresql-via-duckdb-testing-queries-and-exploring-the-core-1d667ae67dc2

---------------------------------------------------------------
API

https://developers.strava.com/docs/getting-started/

Get Authenticated Athlete
https://developers.strava.com/docs/reference/#api-Athletes-getLoggedInAthlete

List Athlete Activities
https://developers.strava.com/docs/reference/#api-Activities-getLoggedInAthleteActivities

https://www.ibm.com/docs/en/informix-servers/14.10?topic=model-concepts-dimensional-data-modeling



---------------------------------------------------------------
MEASURES - in fact?

Day / Week / month / qtr / year dimension to slice activities

Filter per activity type

To display on Calendar:
Nr activities
Distance
Duration min
Perceived vs actual effort
Sleep (Garmin)
Period (Garmin)
Pace

Timeline slicer with display in d/w/m/q/y:
Total km
Nr activities
Total min
Average sleep score
Average effort
Average pace

Avg HR
Max HR
Avg pace
Elevation gain



---------------------------------------------------------------
STAGING

<source>_<entity>, eg
STRAVA_ATHLETE
STRAVA_GEAR
STRAVA_ACTIVITY

audit columns
hashkey
loaddate

---------------------------------------------------------------
MODEL

Reference:
D_Date (standard ref dim)

Derived:
D_Activity_Type
D_Gear

Transformed:
D_Activity
D_Athlete

Calculated & Aggregated:
F_Sport (aggregated activities)
F_Fitness (calculated fitness)





EXAMPLE DATA

Athlete

{
  "id" : 1234567890987654321,
  "username" : "marianne_t",
  "resource_state" : 3,
  "firstname" : "Marianne",
  "lastname" : "Teutenberg",
  "city" : "San Francisco",
  "state" : "CA",
  "country" : "US",
  "sex" : "F",
  "premium" : true,
  "created_at" : "2017-11-14T02:30:05Z",
  "updated_at" : "2018-02-06T19:32:20Z",
  "badge_type_id" : 4,
  "profile_medium" : "https://xxxxxx.cloudfront.net/pictures/athletes/123456789/123456789/2/medium.jpg",
  "profile" : "https://xxxxx.cloudfront.net/pictures/athletes/123456789/123456789/2/large.jpg",
  "friend" : null,
  "follower" : null,
  "follower_count" : 5,
  "friend_count" : 5,
  "mutual_friend_count" : 0,
  "athlete_type" : 1,
  "date_preference" : "%m/%d/%Y",
  "measurement_preference" : "feet",
  "clubs" : [ ],
  "ftp" : null,
  "weight" : 0,
  "bikes" : [ {
    "id" : "b12345678987655",
    "primary" : true,
    "name" : "EMC",
    "resource_state" : 2,
    "distance" : 0
  } ],
  "shoes" : [ {
    "id" : "g12345678987655",
    "primary" : true,
    "name" : "adidas",
    "resource_state" : 2,
    "distance" : 4904
  } ]
}

**ATHLETE ACTIVITIES
[ {
  "resource_state" : 2,
  "athlete" : {
    "id" : 134815,
    "resource_state" : 1
  },
  "name" : "Happy Friday",
  "distance" : 24931.4,
  "moving_time" : 4500,
  "elapsed_time" : 4500,
  "total_elevation_gain" : 0,
  "type" : "Ride",
  "sport_type" : "MountainBikeRide",
  "workout_type" : null,
  "id" : 154504250376823,
  "external_id" : "garmin_push_12345678987654321",
  "upload_id" : 987654321234567891234,
  "start_date" : "2018-05-02T12:15:09Z",
  "start_date_local" : "2018-05-02T05:15:09Z",
  "timezone" : "(GMT-08:00) America/Los_Angeles",
  "utc_offset" : -25200,
  "start_latlng" : null,
  "end_latlng" : null,
  "location_city" : null,
  "location_state" : null,
  "location_country" : "United States",
  "achievement_count" : 0,
  "kudos_count" : 3,
  "comment_count" : 1,
  "athlete_count" : 1,
  "photo_count" : 0,
  "map" : {
    "id" : "a12345678987654321",
    "summary_polyline" : null,
    "resource_state" : 2
  },
  "trainer" : true,
  "commute" : false,
  "manual" : false,
  "private" : false,
  "flagged" : false,
  "gear_id" : "b12345678987654321",
  "from_accepted_tag" : false,
  "average_speed" : 5.54,
  "max_speed" : 11,
  "average_cadence" : 67.1,
  "average_watts" : 175.3,
  "weighted_average_watts" : 210,
  "kilojoules" : 788.7,
  "device_watts" : true,
  "has_heartrate" : true,
  "average_heartrate" : 140.3,
  "max_heartrate" : 178,
  "max_watts" : 406,
  "pr_count" : 0,
  "total_photo_count" : 1,
  "has_kudoed" : false,
  "suffer_score" : 82
}, {
  "resource_state" : 2,
  "athlete" : {
    "id" : 167560,
    "resource_state" : 1
  },
  "name" : "Bondcliff",
  "distance" : 23676.5,
  "moving_time" : 5400,
  "elapsed_time" : 5400,
  "total_elevation_gain" : 0,
  "type" : "Ride",
  "sport_type" : "MountainBikeRide",
  "workout_type" : null,
  "id" : 1234567809,
  "external_id" : "garmin_push_12345678987654321",
  "upload_id" : 1234567819,
  "start_date" : "2018-04-30T12:35:51Z",
  "start_date_local" : "2018-04-30T05:35:51Z",
  "timezone" : "(GMT-08:00) America/Los_Angeles",
  "utc_offset" : -25200,
  "start_latlng" : null,
  "end_latlng" : null,
  "location_city" : null,
  "location_state" : null,
  "location_country" : "United States",
  "achievement_count" : 0,
  "kudos_count" : 4,
  "comment_count" : 0,
  "athlete_count" : 1,
  "photo_count" : 0,
  "map" : {
    "id" : "a12345689",
    "summary_polyline" : null,
    "resource_state" : 2
  },
  "trainer" : true,
  "commute" : false,
  "manual" : false,
  "private" : false,
  "flagged" : false,
  "gear_id" : "b12345678912343",
  "from_accepted_tag" : false,
  "average_speed" : 4.385,
  "max_speed" : 8.8,
  "average_cadence" : 69.8,
  "average_watts" : 200,
  "weighted_average_watts" : 214,
  "kilojoules" : 1080,
  "device_watts" : true,
  "has_heartrate" : true,
  "average_heartrate" : 152.4,
  "max_heartrate" : 183,
  "max_watts" : 403,
  "pr_count" : 0,
  "total_photo_count" : 1,
  "has_kudoed" : false,
  "suffer_score" : 162
} ]


---------------------------------------------------------------
DATABASE
** how to ingest json natively? what if its nested?




---------------------------------------------------------------
CODE

get_date_of_last_warehouse_update()

def get_date_of_last_warehouse_update() -> Tuple[datetime, str]:
  # Get the datetime of last time data was extracted from Strava API by querying PGRES database and also return current datetime.

  mysql_conn = connect_mysql()
  get_last_updated_query = """
    SELECT COALESCE(MAX(LastUpdated), '1900-01-01')
    FROM last_extracted;"""
  mysql_cursor = mysql_conn.cursor()
  mysql_cursor.execute(get_last_updated_query)
  result = mysql_cursor.fetchone()
  last_updated_warehouse = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
  current_datetime = datetime.today().strftime("%Y-%m-%d %H:%M:%S")
  return last_updated_warehouse, current_datetime


connect to local database: retrieve last load date, default null

connect to strava: initial auth / continuous refresh token
if first time: retrieve athlete
retrieve all activities from last load date



